ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ


Кафедра програмної інженерії



Звіт
з лабораторної роботи №2
з дисципліни «Аналіз та рефакторинг коду»
на тему «РОЗРОБКА БАЗИ ДАНИХ ДЛЯ СЕРВЕРНОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ ТА ПРИКЛАДНОГО ПРОГРАМНОГО ІНТЕРФЕЙСУ (API)»






 
Виконала:
ст. гр. ПЗПІ-22-7
Великотрав В. Ю.

Перевірив:
ст. викл. каф. ПІ
Сокорчук І. П.
 





Харків 2024



1.	Мета
Розробити базу даних для серверної частини  програмної системи та прикладного програмного інтерфейсу. 

2.	Хід роботи

2.1 Моделювання UML діаграми

У системі для відстеження споживання води основними акторами є користувач і IoT-пристрій. Користувач взаємодіє із системою, виконуючи такі дії, як реєстрація або авторизація, перегляд щоденного прогресу, додавання записів про випиту воду та перегляд історії споживання. IoT-пристрій діє як другорядний актор, передаючи дані про рівень активності користувача, які використовуються для адаптації розрахунків.
Прецеденти, які стосуються користувача, включають реєстрацію/авторизацію, яка забезпечує доступ до системи, перегляд щоденного прогресу, що дозволяє користувачу бачити, скільки відсотків від денної норми вже випито, додавання записів про воду, яке оновлює поточний стан прогресу, і перегляд історії, який дозволяє аналізувати дані за минулі періоди. Для реалізації цих функцій система включає розрахунок денної норми, збереження та оновлення даних у базі, а також можливість надання рекомендацій. Інтеграція з IoT-пристроями дозволяє враховувати фізичну активність користувача та адаптувати норму споживання води. 
Взаємодію кожної ролі з системою представлено на діаграмі прецедентів (див. рис. 1)
 
Рисунок 1 – UML діаграма прецедентів для серверної частини системи


2.2	 Моделювання ER діаграми даних

Для системи відстеження вживання води було створено три таблиці: Users, WaterIntake та IoTDevices (див. рис. 2). Таблиця Users використовується для зберігання основної інформації про користувачів, включаючи їх унікальний ідентифікатор, електронну пошту, хешований пароль, ім'я, стать, розраховану денну норму води, URL-адресу аватарки, а також дату створення та останнього оновлення запису.
Таблиця WaterIntake призначена для реєстрації даних про споживання води. Вона містить унікальний ідентифікатор запису, ідентифікатор користувача, до якого прив’язаний запис, дату запису, кількість випитої води у мілілітрах, а також дату створення і останнього оновлення запису. Ця таблиця дозволяє вести історію вживання води для кожного користувача.
Таблиця IoTDevices використовується для зберігання даних про IoT-пристрої, пов’язані з користувачами. У ній зберігаються унікальний ідентифікатор пристрою, ідентифікатор користувача, до якого прив’язаний пристрій, унікальний ідентифікатор самого пристрою, рівень фізичної активності, який відстежує пристрій, а також дата останньої синхронізації.

 
Рисунок 2 – ER діаграма даних


2.3	 Розробка АРІ для взаємодії серверної частини з клієнтами

Для розробки серверної частини програмної системи, орієнтованої на відстеження споживання води, необхідно створити RESTful API, яке забезпечить взаємодію між клієнтською частиною та сервером. Для цього ми використовуємо технології MongoDB, Express.js та Node.js, що дозволяє створити ефективне, масштабоване і надійне API.
Основні шляхи API, які будуть реалізовані для роботи з користувачами та їх споживанням води, виглядають наступним чином:

	Реєстрація користувача (/auth/register): Цей шлях обробляє запит на реєстрацію нового користувача в системі. Користувач передає свої дані, які зберігаються в базі даних MongoDB. Після успішної реєстрації повертається повідомлення про успіх.
	Авторизація користувача (/auth/login): Користувач вводить свої облікові дані для входу в систему. Після перевірки даних генерується JWT токен, який передається клієнту і використовується для автентифікації на подальших етапах взаємодії з API.
	Вихід користувача (/auth/logout): Цей шлях дозволяє користувачеві вийти з системи, анулюючи активну сесію. Токен користувача більше не буде дійсним.
	Отримання інформації про користувача (/user/info): За цим маршрутом клієнт може отримати основну інформацію про себе (ім'я, стать, денна норма споживання води). Цей запит вимагає авторизації користувача.
	Оновлення інформації користувача (/user/updateInfo): Цей шлях дозволяє користувачеві оновити свої персональні дані, такі як ім'я, стать, або денну норму споживання води. Змінені дані зберігаються в базі даних.
	Завантаження та оновлення фото користувача (/user/userPhoto): За цим маршрутом користувач може завантажити своє фото профілю або отримати поточне фото. Фото зберігається на сервері, а URL зберігається в базі даних.
	Запис спожитої води (/user/newDailyWaterIntake): Користувач може додати запис про кількість випитої води за конкретний день. Це дозволяє системі відслідковувати динаміку споживання води.
	Отримання всіх записів про споживання води (/water): За цим маршрутом користувач може отримати список всіх своїх записів про споживання води.
	Отримання конкретного запису про споживання води (/water/{id}): Цей маршрут дозволяє отримати деталі конкретного запису про споживання води за його унікальним ідентифікатором.
	Оновлення запису про споживання води (/water/{id}): Якщо користувач хоче змінити запис про споживання води, він може оновити кількість випитої води в конкретному записі.
	Отримання записів про споживання води за місяць та рік (/water/{month}/{year}): Цей шлях дозволяє отримати всі записи про споживання води за вказаний місяць та рік, що дає можливість аналізувати споживання води за певний період часу.

Кожен з цих шляхів обробляє певну операцію, що забезпечує відстеження та управління споживанням води. Всі маршрути вимагають автентифікації користувача для доступу до персональних даних, що гарантує безпеку та конфіденційність інформації.


Висновок
Під час виконання лабораторної роботи було створено UML діаграму прецедентів для серверної частини, також було створено ER діаграму даних. На основі цих даних було створено базу даних для програмної системи. Було розроблено функції для роботи з цією базою даних та АРІ для взаємодії серверної частини з клієнтами. Після чого було створено програмну реалізацію розробленого АРІ.

Посилання на відеозапис: https://youtu.be/7b0WZx7skwo
