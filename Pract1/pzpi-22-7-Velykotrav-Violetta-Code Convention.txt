МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ

ХФРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ





Кафедра програмної інженерії





ЗВІТ

З практичної роботи № 1

з дисципліни «Аналіз та рефакторинг коду»

з теми: «Правила оформлення коду»





Виконала

Перевірив

ст. гр. ПЗПІ-22-7

ст. викладач кафедри ПІ

Великотрав В. Ю.

Сокорчук І. П.





Харків 2024




1.1 Мета роботи

Ознайомитися з основними рекомендаціями щодо написання чистого, ефективного та підтримуваного коду для різних мов програмування, а також навчитися аналізувати та рефакторити код для покращення його якості.



2.1 Хід роботи


Обрати мову програмування для прикладів коду. Створити презентацію на тему «Правила оформлення програмного коду».

Було обрано мову програмування JavaScript. У презентації (Додаток Б) наведено основні рекомендації щодо оформлення програмного коду з описами.



Висновки

Набуто навичок написання чистого, ефективного та підтримуваного коду для різних мов програмування, а також навичок рефакторингу коду. Детально розглянуто основні правила оформлення коду.

Відео-презентація: https://youtu.be/r7XjS8RJKzI





Додаток А

Програмний код, використаний як приклад у презентації:



// Константи

const DISCOUNT_RATE = 0.1;



/**

* Клас для роботи з користувачами

*/

class User {

constructor(id, name, age) {

this.id = id; // Унікальний ідентифікатор користувача

this.name = name; // Ім'я користувача

this.age = age; // Вік користувача

}



// Метод для привітання

greet() {

return `Hello, my name is ${this.name} and I am ${this.age} years old.`;

}



// Метод для отримання знижки

calculateDiscount(total) {

return total * DISCOUNT_RATE;

}

}



/**

* Функція для отримання даних користувачів (імітація API)

* @returns {Promise<User[]>} Масив об'єктів користувачів

*/

async function fetchUsers() {

// Імітуємо затримку, ніби ми отримуємо дані з API return new Promise(resolve => {

setTimeout(() => {

const mockData = [

{ id: 1, name: 'Alice', age: 25 },

{ id: 2, name: 'Bob', age: 30 },

{ id: 3, name: 'Charlie', age: 35 },

];

resolve(mockData.map(user => new User(user.id, user.name, user.age)));

}, 1000);

});

}



/**

* Функція для обчислення загальної суми покупок із знижкою

* @param {number[]} prices Масив цін

* @returns {number} Сума після знижки

*/

function calculateTotalWithDiscount(prices) {

const total = prices.reduce((sum, price) => sum + price, 0); //

Функціональний підхід

const discount = total * DISCOUNT_RATE; return total - discount;

}



/**

* Основний виконуваний код

*/

(async function main() {

console.log('Fetching users...'); const users = await fetchUsers(); if (users.length === 0) {

console.warn('No users available to display.'); return;

}



// Демонстрація роботи з класами та функціями

users.forEach(user => {

console.log(user.greet()); // Виводимо привітання кожного

користувача

});



// Демонстрація роботи з масивами

const prices = [100, 200, 300]; const total = calculateTotalWithDiscount(prices); console.log(`Total after discount: $${total.toFixed(2)}`);

})();





Додаток Б

Презентація на тему «Правила оформлення програмного коду»


ОСНОВНІ РЕКОМЕНДАЦІЇ НАПИСАННЯ КОДУ ДЛЯ JAVASCRIPT

Великотрав Віолетта , ПЗПІ-22-7


JAVASCRIPT Це високорівнева, динамічна мова програмування, яка зазвичай використовується для створення інтерактивних веб-сайтів. Вона була вперше розроблена в 1995 році компанією Netscape і стала однією з основних технологій веб-розробки поряд із HTML і CSS


Динамічна та слаботипізована мова

Гнучкість та кросплатформеність

Асинхронність

DOM маніпуляція

Прототипне наслідування

Подієво-орієнтована модель

Підтримка модулів


СТИЛЬОВІ РЕКОМЕНДАЦІЇ

Відступи та пробіли - Використовуйте два пробіли для відступів для уніфікованого вигляду коду.

Розміщення дужок - Відкриваюча дужка { повинна бути на тій самій лінії, що й оператор

Довжина рядка - Слідкуйте, щоб рядки не були занадто довгими — не більше 80-100 символів.

Порожні рядки - Використовуйте порожні рядки для відділення логічних блоків коду



ПРАВИЛА НАЙМЕНУВАННЯ ЗМІННИХ, ФУНКЦІЙ ТА КЛАСІВ

Правильне найменування змінних, функцій та класів має вирішальне значення для зручності читання і розуміння коду. Хороші назви допомагають іншим розробникам швидко зрозуміти призначення змінних і функцій без необхідності додаткових пояснень


ЗМІСТОВНІ ІМЕНА

Імена змінних і функцій мають бути описовими і чітко вказувати на їхнє призначення.


CAMELCASE ДЛЯ ЗМІННИХ І ФУНКЦІЙ

Імена змінних і функцій мають починатися з малої літери, а кожне наступне слово — з великої.


PASCALCASE ДЛЯ КЛАСІВ

Імена класів починаються з великої літери, а кожне наступне слово також пишеться з великої.


УНИКАЙТЕ СКОРОЧЕНЬ ТА АБРЕВІАТУР

Назви мають бути інтуїтивно зрозумілими і не містити непотрібних скорочень або абревіатур, які важко зрозуміти.


ВИКОРИСТОВУЙТЕ ДІЄСЛОВА ДЛЯ НАЗВ ФУНКЦІЙ

Ім'я функції має відображати дію, яку вона виконує. Використовуйте дієслова на початку, наприклад get, set, calculate, fetch.


СТРУКТУРА КОДУ

Структура коду — це організація і розподіл коду в межах файлу або проекту. Вона включає логічне розміщення функцій, класів, змінних, модулів та іншого функціоналу для забезпечення читабельності та простоти підтримки коду.


РОЗДІЛЯЙТЕ КОД НА МОДУЛІ

Використовуйте модулі для розділення логіки на окремі файли за функціональністю


ЛОГІЧНО ГРУПУЙТЕ ФУНКЦІОНАЛЬНІ БЛОКИ

Розділяйте код на логічні секції за допомогою порожніх рядків. Наприклад, групуйте функції за їхньою метою або частини коду, що належать до певної задачі.


ПРИНЦИПИ РЕФАКТОРИНГУ

Уникайте дублювання коду - Використовуйте функції або модулі для уникнення повторення одного й того ж коду

Розділення на функції - Розбивайте великі функції на менші, простіші. Це полегшує їх розуміння та тестування

Зменшення складності - Уникайте використання занадто складних конструкцій, таких як вкладені цикли або багаторазові умови. Спрощуйте логіку.


ОПТИМІЗАЦІЯ ПРОДУКТИВНОСТІ

Оптимізація продуктивності полягає в підвищенні швидкості та ефективності коду. Це може включати зменшення часу виконання, споживання пам’яті та загальної затримки.


ВИКОРИСТАННЯ ЛОКАЛЬНИХ ЗМІННИХ

Локальні змінні працюють швидше, ніж глобальні, оскільки доступ до них є більш ефективним.


ОПТИМІЗАЦІЯ ЦИКЛІВ

Уникайте повторних обчислень у циклах, наприклад, зберігайте довжину масиву в змінній


УНИКНЕННЯ ПОВТОРНИХ ОБЧИСЛЕНЬ

Зберігайте результати обчислень, якщо їх потрібно використовувати кілька разів.


ВИКОРИСТАННЯ МЕТОДІВ МАСИВУ

Використовуйте методи масивів (map, filter, reduce) замість ручних циклів для кращої читабельності та продуктивності.


ОБРОБКА ПОМИЛОК

Використання try-catch - try...catch: Дозволяє перехоплювати помилки та виконувати альтернативний код

Кидання помилок (throw) - Використовуйте throw для генерації власних помилок, коли виявляєте невірний стан даних

Логування помилок - Зберігайте інформацію про помилки для подальшого аналізу

Користувацькі помилки - Створюйте власні класи помилок для більшої чіткості


ДОТРИМАННЯ ПАРАДИГМ ПРОГРАМУВАННЯ

Це важливий аспект розробки програмного забезпечення, оскільки це дозволяє створювати структурований, модульний і підтримуваний код.

У JavaScript підтримуються кілька парадигм, включаючи об'єктно-орієнтоване програмування (ООП) і функціональне програмування (ФП).


ПАРАДИГМА НА ОСНОВІ ПОДІЙ

У JavaScript широко використовується подієва модель, де функції реагують на події, такі як натискання кнопок або завантаження сторінок.


ТЕСТУВАННЯ ТА ДОКУМЕНТУВАННЯ

Тестування та документування коду є ключовими аспектами розробки, які забезпечують якість та підтримуваність програмного забезпечення. Тестування допомагає виявити помилки та забезпечити, щоб код працював як очікується, тоді як документування забезпечує зрозумілість коду для інших розробників.


UNIT-ТЕСТИ

перевіряють окремі компоненти вашого коду (функції, класи тощо) на правильність роботи. Вони дозволяють ізолювати окремі частини коду для тестування.

Integration-тести - перевіряють взаємодію між різними компонентами системи та їхню спільну роботу.

End-to-End тести - це форма тестування, яка перевіряє працездатність програмного продукту від початку до кінця, відтворюючи реальні сценарії використання та перевіряючи взаємодію між різними компонентами системи.


КОМЕНТАРІ

Додавайте коментарі до коду, щоб пояснити, що робить кожен блок коду, особливо у складних частинах


ДОКУМЕНТАЦІЯ ЗА ДОПОМОГОЮ JSDOC

Використовуйте JSDoc для генерації документації, яка пояснює функції, параметри та повернені значення.


ДОКУМЕНТУВАННЯ API

Якщо ви створюєте API, документуйте його за допомогою OpenAPI або Swagger


ВИСНОВКИ

Запропоновані рекомендації підвищують зрозумілість, надійність і підтримуваність коду, що дозволяє легше працювати над його вдосконаленням та масштабуванням. Тестування, документування та дотримання парадигм допомагають швидко знаходити помилки, спрощують внесення змін та забезпечують стабільність програми в довгостроковій перспективі.


СПИСОК ДЖЕРЕЛ

Airbnb Javascript Style Guide ( https://github.com/airbnb/javascript?

tab=readme-ov-file#the-javascript-style-guide-guide ) Google JavaScript Style Guide ( https://google.github.io/styleguide/jsguide.html ) Refactoring: Improving the Design of Existing Code. AddisionWesley, 2018.





